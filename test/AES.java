
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.regex.Pattern;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class AES
{
	public static void main(String[] args) throws NoSuchAlgorithmException,
			NoSuchPaddingException, Exception, IllegalBlockSizeException, BadPaddingException
	{
		AES aes = new AES();
		aes.setKey("8D969EEF6ECAD3C29A3A629280E686CF0C3F5D5A86AFF3CA12020C923ADC6C92".substring(0,16));
		String s = aes.decrypt("A6B7DF87E165E1B76FCDAD63ABBEC2A755B93C2A1837FFF03C721D1D5A938E479D3BFB41A19046F9CDAD4B87912BA03C2C5CF9A935A8F4B8F607321312D29D0B6C465EB5BC165E541B7DE0AF6C23DA9698A302644F3A29A3D54BA9016B564AC6EA3311D75B5F7CEED40AA75A042A92D2664FA5324CB8029EA6DEE5208BA735A3AEAC578D2F69D01FC1A14DCF65C84EFAA2B8E591240BDC579FFF252460C32DE80975F99E6D8B60868FE3CB39BC170889F263BC392CC0461BA0258745BD4E24CB7E271E59D6E480985C42789C4378180EF1E9B96FA04F9E1CC88D03D238E81A1F55FC88EB623070F13254F3351D76A072764DC5E3642563DB5A621EAC32FB9A19BB2270158BEA1D27908DDE9CF14E59F6E770AF77A27D28E316476A73BA5EE42A76AA6FBA137062B849F90FD706D00B46CD972D66C6BCC8EC791A4D133643E64A5AD0AE5F08A9CEA1034964BA5E247BC5E41126AF97A04B80907CB0D8A55A7F901DD031DEC4A00D2BD023A7E41C710D557D2A0734BCFD61A01D99092973F16E789F7BA4D6AD31EEAA038364A0FE9F4C02375B30D5FB4399DB85A9CE75A07CB1D60D71075FCB0618E4FF9F72EE44F391164DC3A177DC892CF9C67CDC179FEB14E2C348AFCAC74E979550F518FEC14A75F3B475A200A1299B18B91C80FBFADFA2556CD7C2DF0CA40FEC84EE6034F32179174B6D866D9007A4C7215E4D2A52A1D85A92B64BD107DD41EB28D6132848BB5F5C89DFB1B217C46FD5019608B2DAF67903837A20DBBD87C5FA5E1FC7109D6914B39266E87FD36CA76A20FAB3B8113298A8D281C59D9E35FC82B3822FCCB8A70BE54B1F37A58ADEDEDA9F56F5635FC026A755B8A2D841EBF0EABB0B53241CB7F4234EE1DA5282FF6EEF0FF461C66D804145B779C6141F2A7331CB5CC91D49C1F3C9CA835023678BEE8199749BDC6E522398B02CEE038BBF5B19608161374F8D54C1E94AD201DF9B9820CDB21B42020E449CE28E84AA9BB8938687B289E3D2861B33AE7F415AF5FC915984A1941114C22D46B9362CF39CCE6B1088411F4EC41C7921E4E8CACA1E1C57032C5A2BE10EF9C72E62E6F25C38C8D5EE85ED248E3B40C92DF2AC937FEE203B3C68F9BE2607528C250F1E7AC24B7BD3B137B591BEA414A26F99BDD91B8CF33838191A9DA5ED95305E411FD62B6BF439695DD3E25124115FA4235B415C54386DE1EE6DAC0CFBB90FA49718810E4FB95E774415FC6BAEF6B2ACC6F4584C439C16D9C3A716F6B8A65FAF6BFF41599873A471D62E565A23926A43C71F48B858C06FE72921827930FCAB9A30FF20EF9A9179633D1902281450A821E4E8CACA1E1C57032C5A2BE10EF9C72E9652B8C150837A985F71F5DC0AD33272ADB524353516A136AD4A0983FB712B197F8FB3A34D0CE92642C52D6B3B823E7815E9C4C7944DD1C213FBAD1CF6D442CCD0192A63D6452884D79D68AD6B2E29EA8028B9691AA6077D559938E2A42A6CBB95716BD8AE78624295BEA94331D149F793BB64616CD65062FE364F6769027368C3866FB65A03F12DD05272902B35EA487EEA2195EF9E5FBAEAF9B620BE105FB84A7E722D9091D7144D578B5682BED1FF0DA5E9BCC6A208AD856EA06F0FE24F4D80876EA595B130DBE5703F8FFA93E5D39C7E9068FD8258F11FDA19C27C5B596960693A09F8F4ECC79A5EDFE3B9699F6BCFBD1A8F3B45A1F0CF29F924BAE6D767BD7EE5051C62023EE5178C8C1ED77C0F");
		System.out.println(s);
	}
	private SecretKeySpec key;
	private Cipher cipher;
	private int size = 128;

	public AES() throws NoSuchAlgorithmException, NoSuchPaddingException
	{
		KeyGenerator kgen = KeyGenerator.getInstance("AES");
		kgen.init(size); // 192 and 256 bits may not be available
		SecretKey skey = kgen.generateKey();
		byte[] raw = skey.getEncoded();
		key = new SecretKeySpec(raw, "AES");
		cipher = Cipher.getInstance("AES");
	}

	public void setKey(String keyText)
	{
		byte[] bText = new byte[size];
		bText = keyText.getBytes();
		key = new SecretKeySpec(bText, "AES");
	}

	public String encrypt(String message) throws InvalidKeyException,
			IllegalBlockSizeException, BadPaddingException
	{
		cipher.init(Cipher.ENCRYPT_MODE, key);
		byte[] encrypted = cipher.doFinal(message.getBytes());
		return byteArrayToHexString(encrypted);
	}

	public String decrypt(String hexCiphertext)
			throws IllegalBlockSizeException, BadPaddingException,
			InvalidKeyException
	{
		cipher.init(Cipher.DECRYPT_MODE, key);
		byte[] decrypted = cipher.doFinal(hexStringToByteArray(hexCiphertext));
		return byteArrayToHexString(decrypted);
	}

	private static String byteArrayToHexString(byte[] raw)
	{
		String hex = "0x";
		String s = new String(raw);
		for (int x = 0; x < s.length(); x++)
		{
			char[] t = s.substring(x, x + 1).toCharArray();
			hex += Integer.toHexString((int) t[0]).toUpperCase();
		}
		return hex;
	}

	private static byte[] hexStringToByteArray(String hex)
	{
		Pattern replace = Pattern.compile("^0x");
		String s = replace.matcher(hex).replaceAll("");

		byte[] b = new byte[s.length() / 2];
		for (int i = 0; i < b.length; i++)
		{
			int index = i * 2;
			int v = Integer.parseInt(s.substring(index, index + 2), 16);
			b[i] = (byte) v;
		}
		return b;
	}

}